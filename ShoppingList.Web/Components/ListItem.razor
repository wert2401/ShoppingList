@using ShoppingList.Application.ShoppingListItems.Commands
@using ShoppingList.Application.ShoppingListItems.Queries
@using ShoppingList.Domain.ShoppingListItems;

@inject ISender sender;

@if (isEditMode)
{
    <AddNewItemInput Input="@Item.Name" Decline="OnDecline" Accept="OnAccept" />
}
else
{
    <div class="@(Item.IsBought ? "checked" : "unchecked")" @onpointerdown="OnPointerDown" @onpointerup="OnPointerUp">
        <img src="@(Item.IsBought ? "icons/checkboxChecked.svg" : "icons/checkboxEmpty.svg")" alt="Checkbox" />
        <p>@Item.Name</p>
    </div>
}

@code {
    [Parameter]
    public required ShoppingListItem Item { get; set; }

    [Parameter]
    public EventCallback OnRemoved { get; set; }

    [Parameter]
    public EventCallback OnChecked { get; set; }

    private bool isEditMode { get; set; } = false;

    DateTime pointerDown;
    DateTime pointerUp;

    private async Task RefreshItemAsync()
    {
        GetShoppingListItemQuery getShoppingListItemQuery = new GetShoppingListItemQuery(Item.Id);
        var itemResponse = await sender.Send(getShoppingListItemQuery);

        itemResponse.Then(x => Item = x);

        StateHasChanged();
    }

    private void OnPointerDown()
    {
        pointerDown = DateTime.Now;
    }

    private async Task OnDecline()
    {
        isEditMode = false;

        RemoveShoppingListItemCommand removeShoppingListItemCommand = new RemoveShoppingListItemCommand(Item.Id);
        await sender.Send(removeShoppingListItemCommand);

        await OnRemoved.InvokeAsync();

        StateHasChanged();
    }

    private async Task OnAccept(string input)
    {
        isEditMode = false;

        SetShoppingListItemNameCommand setShoppingListItemNameCommand = new SetShoppingListItemNameCommand(Item.Id, input);
        await sender.Send(setShoppingListItemNameCommand);

        await RefreshItemAsync();

        StateHasChanged();
    }

    private async Task OnPointerUp()
    {
        pointerUp = DateTime.Now;

        var ms = (pointerUp - pointerDown).TotalMilliseconds;

        if (ms < 400)
        {
            CheckShoppingListItemCommand markShoppingListItemCommand = new CheckShoppingListItemCommand(Item.Id);
            await sender.Send(markShoppingListItemCommand);

            await RefreshItemAsync();

            await OnChecked.InvokeAsync();
        }
        else
        {
            isEditMode = true;
        }
    }
}
