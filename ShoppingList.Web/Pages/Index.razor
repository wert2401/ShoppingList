@page "/"
@using ShoppingList.Application.ShoppingListItems.Commands
@using ShoppingList.Application.ShoppingListItems.Queries
@using ShoppingList.Application.ShoppingLists.Commands
@using ShoppingList.Application.ShoppingLists.Queries
@using ShoppingList.Domain.ShoppingListItems
@using ShoppingList.Domain.ShoppingLists
@using ShoppingList.Infrastructure.Persistence

@inject ISender sender;

<div class="list-header">
    <AddNewItemBtn OnClickCallback="AddNewItemBtnClick" />
    @if (_currentShoppingList != null)
    {
        <Status CheckedCount="@_shoppingListItems.Where(x => x.IsBought).Count()" Count="@_shoppingListItems.Count()" />
    }
</div>

<div class="list">
    @if (_currentShoppingList != null)
    {
        @if (IsAddingNewItem)
        {
            <AddNewItemInput Decline="HideAddNewItemBtn" Accept="async (input) => await AddNewItem(_currentShoppingList.Id, input)" />
        }

        @foreach (var item in _shoppingListItems.OrderBy(x => x.IsBought).ThenBy(x => x.Name))
        {
            <ListItem Item="@item" OnRemoved="OnRemovedItem" OnChecked="OnCheckedItem" />
        }
    }
</div>

@code {
    bool IsAddingNewItem = false;

    List<ShoppingList> _shoppingLists = new();
    List<ShoppingListItem> _shoppingListItems = new();
    ShoppingList? _currentShoppingList;

    private async Task RefreshItemsListAsync()
    {
        if (_currentShoppingList is null)
        {
            return;
        }

        ShoppingListItemsByShoppingListQuery listItemsQuery = new ShoppingListItemsByShoppingListQuery(_currentShoppingList.Id);
        var shoppingListItemsResult = await sender.Send(listItemsQuery);

        shoppingListItemsResult.Then(x => _shoppingListItems = x.ToList());

        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        AllShoppingListsQuery shoppingListsQuery = new AllShoppingListsQuery();

        _shoppingLists = (await sender.Send(shoppingListsQuery)).ToList();

        if (_shoppingLists.Count() < 1)
        {
            AddShoppingListCommand command = new AddShoppingListCommand("default");
            await sender.Send(command);

            _shoppingLists = (await sender.Send(shoppingListsQuery)).ToList();
        }

        _currentShoppingList = _shoppingLists[0];

        await RefreshItemsListAsync();
    }

    private void AddNewItemBtnClick()
    {
        IsAddingNewItem = !IsAddingNewItem;
    }

    private void HideAddNewItemBtn()
    {
        IsAddingNewItem = false;
    }

    private async Task AddNewItem(Guid shoppingListGuid, string newItemName)
    {
        HideAddNewItemBtn();

        AddShoppingListItemCommand addShoppingListItemCommand = new AddShoppingListItemCommand(shoppingListGuid, newItemName);
        await sender.Send(addShoppingListItemCommand);

        await RefreshItemsListAsync();
    }

    private async Task OnRemovedItem()
    {
        await RefreshItemsListAsync();
    }

    private async Task OnCheckedItem()
    {
        await RefreshItemsListAsync();
    }
}